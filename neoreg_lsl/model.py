import torch
import numpy as np
from scipy.signal import butter, sosfiltfilt
from cdcn_hslt import R2G_CDCN_Hybrid  # –∑–∞–º–µ–Ω–∏ 'your_model_file' –Ω–∞ –∏–º—è —Ñ–∞–π–ª–∞ —Å –º–æ–¥–µ–ª—å—é

# === –§—É–Ω–∫—Ü–∏–∏ –ø—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–∏–≥–Ω–∞–ª–∞ ===
def bandpass_filter(signal, lowcut, highcut, fs, order=5):
    nyq = 0.5 * fs
    low = lowcut / nyq
    high = highcut / nyq
    sos = butter(order, [low, high], btype='band', output='sos')
    return sosfiltfilt(sos, signal)

def compute_de(signal):
    variance = np.var(signal, axis=1, ddof=1)
    return 0.5 * np.log(2 * np.pi * np.e * (variance + 1e-8))

def compute_de_features(eeg_segment, fs=128):
    assert eeg_segment.ndim == 2, "–û–∂–∏–¥–∞–µ—Ç—Å—è 2D –º–∞—Å—Å–∏–≤ [–∫–∞–Ω–∞–ª—ã, –≤—Ä–µ–º—è]"
    assert eeg_segment.shape[0] == 32, f"–û–∂–∏–¥–∞–µ—Ç—Å—è 32 –∫–∞–Ω–∞–ª–∞, –ø–æ–ª—É—á–µ–Ω–æ {eeg_segment.shape[0]}"

    bands = {
        'delta': (1, 3),
        'theta': (4, 7),
        'alpha': (8, 13),
        'beta': (14, 30),
        'gamma': (31, 50)
    }

    features = []
    for band in bands.values():
        filtered = np.array([
            bandpass_filter(channel, band[0], band[1], fs)
            for channel in eeg_segment
        ])
        de = compute_de(filtered)
        features.append(de)

    return np.array(features).T

# === –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏ ===
try:
    model = R2G_CDCN_Hybrid(input_shape=(32, 5), tasks=["valence", "dominance"])
    model.load_state_dict(torch.load("model.pth"))  # –∏–ª–∏ –ø—É—Ç—å –∫ –º–æ–¥–µ–ª–∏
    model.eval()
except Exception as e:
    print("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥–µ–ª–∏:", e)
    model = None

# === –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è ===

import numpy as np
from scipy.interpolate import interp1d


def interpolate_channels(eeg_segment, target_channels=32):
    """
    –ò–Ω—Ç–µ—Ä–ø–æ–ª–∏—Ä—É–µ—Ç —Å–∏–≥–Ω–∞–ª –≠–≠–ì —Å —Ç–µ–∫—É—â–µ–≥–æ —á–∏—Å–ª–∞ –∫–∞–Ω–∞–ª–æ–≤ –¥–æ target_channels.

    :param eeg_segment: np.array, shape [current_channels, time]
    :param target_channels: int, –∂–µ–ª–∞–µ–º–æ–µ —á–∏—Å–ª–æ –∫–∞–Ω–∞–ª–æ–≤ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 32)
    :return: np.array, shape [target_channels, time]
    """
    current_channels = eeg_segment.shape[0]

    if current_channels == target_channels:
        return eeg_segment

    print(f"üîÑ –ò–Ω—Ç–µ—Ä–ø–æ–ª–∏—Ä—É–µ–º —Å {current_channels} –¥–æ {target_channels} –∫–∞–Ω–∞–ª–æ–≤...")

    # –°–æ–∑–¥–∞—ë–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –¥–ª—è –∏—Å—Ö–æ–¥–Ω–æ–≥–æ –∏ —Ü–µ–ª–µ–≤–æ–≥–æ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞
    x_old = np.linspace(0, 1, current_channels)
    x_new = np.linspace(0, 1, target_channels)

    # –†–µ–∑—É–ª—å—Ç–∏—Ä—É—é—â–∏–π –º–∞—Å—Å–∏–≤
    interpolated_data = np.zeros((target_channels, eeg_segment.shape[1]))

    for i in range(eeg_segment.shape[1]):
        f = interp1d(x_old, eeg_segment[:, i], kind='linear', fill_value="extrapolate")
        interpolated_data[:, i] = f(x_new)

    return interpolated_data
def predict_mood(eeg_segment):
    if model is None:
        return "–º–æ–¥–µ–ª—å –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞"
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä–Ω–æ—Å—Ç—å
        if eeg_segment.shape[0] != 32:
            print(f"‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ {eeg_segment.shape[0]} –∫–∞–Ω–∞–ª–æ–≤ ‚Äî –≤—ã–ø–æ–ª–Ω—è–µ–º –∏–Ω—Ç–µ—Ä–ø–æ–ª—è—Ü–∏—é –¥–æ 32...")
            eeg_segment = interpolate_channels(eeg_segment, target_channels=32)

        features = compute_de_features(eeg_segment)
        features = torch.tensor(features[np.newaxis], dtype=torch.float32)  # [1, E, F]

        with torch.no_grad():
            outputs = model(features)

        valence = outputs["valence"].argmax().item()
        arousal = outputs["dominance"].argmax().item()

        mood_map = {
            (0, 0): "–≥—Ä—É—Å—Ç–Ω–æ–µ",
            (0, 1): "—Å–ø–æ–∫–æ–π–Ω–æ–µ",
            (1, 0): "—Ä–∞–∑–¥—Ä–∞–∂—ë–Ω–Ω–æ–µ",
            (1, 1): "–≤–µ—Å—ë–ª–æ–µ"
        }

        return mood_map.get((valence, arousal), "–Ω–µ–æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω–æ–µ")
    except Exception as e:
        print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ:", e)
        return "–æ—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞"