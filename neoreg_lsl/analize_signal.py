import pandas as pd
import numpy as np
from scipy.signal import welch

# === –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö ===
df = pd.read_csv("raw_eeg_data.txt", sep="\t")

# –ü—Ä–æ–≤–µ—Ä–∏–º, –≤—Å–µ –ª–∏ –∫–∞–Ω–∞–ª—ã ‚Äî —á–∏—Å–ª–æ–≤—ã–µ
channel_cols = [f'ch{i}' for i in range(1, 17)]
for ch in channel_cols:
    df[ch] = pd.to_numeric(df[ch], errors='coerce')  # –ø—Ä–µ–≤—Ä–∞—â–∞–µ–º —Å—Ç—Ä–æ–∫–∏ –≤ float (–µ—Å–ª–∏ –±—ã–ª–∏)

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–∞—Å—à—Ç–∞–±–∞ ‚Äî –ø–æ—Å–º–æ—Ç—Ä–∏–º –¥–∏–∞–ø–∞–∑–æ–Ω –∑–Ω–∞—á–µ–Ω–∏–π –¥–ª—è –≤—Å–µ—Ö –∫–∞–Ω–∞–ª–æ–≤
print(df[channel_cols].describe())

# === –ü–æ–¥—Å—á—ë—Ç RMS –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ ===
df['rms_activity_v'] = df[channel_cols].apply(lambda row: np.sqrt(np.mean(row**2)), axis=1)

# üëâ –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–∞—Å—à—Ç–∞–±–∞ –¥–∞–Ω–Ω—ã—Ö:
sample_val = df[channel_cols].iloc[0].abs().max()

if sample_val < 1e-3:  # –ï—Å–ª–∏ –∑–Ω–∞—á–µ–Ω–∏—è –º–µ–Ω—å—à–µ 1e-3 –í–æ–ª—å—Ç–∞, —Ç–æ —ç—Ç–æ –í–æ–ª—å—Ç—ã
    print("üìè –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –∑–Ω–∞—á–µ–Ω–∏—è –≤ –í–æ–ª—å—Ç–∞—Ö ‚Äî –ø–µ—Ä–µ–≤–æ–¥–∏–º –≤ ¬µV")
    df['rms_activity_uv'] = df['rms_activity_v'] * 1e6  # –ü–µ—Ä–µ–≤–æ–¥ –≤ –º–∏–∫—Ä–æ–≤–æ–ª—å—Ç—ã
else:
    print("üìè –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –∑–Ω–∞—á–µ–Ω–∏—è –≤ ¬µV ‚Äî –Ω–µ –ø–µ—Ä–µ–≤–æ–¥–∏–º")
    df['rms_activity_uv'] = df['rms_activity_v']  # –û—Å—Ç–∞–≤–ª—è–µ–º –∫–∞–∫ –µ—Å—Ç—å (–≤ ¬µV)

# –°—Ä–µ–¥–Ω–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ RMS
mean_rms_uv = df['rms_activity_uv'].mean()
print(f"\nüîπ –°—Ä–µ–¥–Ω—è—è –º–æ–∑–≥–æ–≤–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å (RMS): {mean_rms_uv:.2f} ¬µV")

# –ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è –º–æ–∑–≥–æ–≤–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
if mean_rms_uv < 5:
    print("üßò –°–æ—Å—Ç–æ—è–Ω–∏–µ: —Ä–∞—Å—Å–ª–∞–±–ª–µ–Ω–Ω–æ–µ –∏–ª–∏ —Å–æ–Ω–ª–∏–≤–æ–µ")
elif mean_rms_uv < 15:
    print("üôÇ –°–æ—Å—Ç–æ—è–Ω–∏–µ: —Å–ø–æ–∫–æ–π–Ω–æ–µ –±–æ–¥—Ä—Å—Ç–≤–æ–≤–∞–Ω–∏–µ")
else:
    print("‚ö° –°–æ—Å—Ç–æ—è–Ω–∏–µ: –∞–∫—Ç–∏–≤–Ω–æ–µ –≤–Ω–∏–º–∞–Ω–∏–µ –∏–ª–∏ –≤–æ–∑–±—É–∂–¥–µ–Ω–∏–µ")

# === –ê–Ω–∞–ª–∏–∑ –ê–ª—å—Ñ–∞-—Ä–∏—Ç–º–∞ (8‚Äì12 –ì—Ü) ===
fs = 250  # —á–∞—Å—Ç–æ—Ç–∞ –¥–∏—Å–∫—Ä–µ—Ç–∏–∑–∞—Ü–∏–∏
channel_for_alpha = 'ch8'  # –ö–∞–Ω–∞–ª –¥–ª—è –∞–ª—å—Ñ–∞-—Ä–∏—Ç–º–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –∑–∞—Ç—ã–ª–æ—á–Ω—ã–π)

# –ü–æ–ª—É—á–∞–µ–º —Å–∏–≥–Ω–∞–ª –¥–ª—è –æ–¥–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞
signal = df[channel_for_alpha].values

# –ü–ª–æ—Ç–Ω–æ—Å—Ç—å –º–æ—â–Ω–æ—Å—Ç–∏ –º–µ—Ç–æ–¥–æ–º Welch
f, Pxx = welch(signal, fs=fs, nperseg=fs*2)

# –í—ã–¥–µ–ª—è–µ–º –º–æ—â–Ω–æ—Å—Ç—å –≤ –∞–ª—å—Ñ–∞-–¥–∏–∞–ø–∞–∑–æ–Ω–µ
alpha_band = (f >= 8) & (f <= 12)
alpha_power = np.sum(Pxx[alpha_band])
total_power = np.sum(Pxx)

# –û—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–∞—è –º–æ—â–Ω–æ—Å—Ç—å –∞–ª—å—Ñ–∞-—Ä–∏—Ç–º–∞
alpha_ratio = alpha_power / total_power

print(f"üîπ –ê–ª—å—Ñ–∞-–º–æ—â–Ω–æ—Å—Ç—å (–∫–∞–Ω–∞–ª {channel_for_alpha}): {alpha_power:.2e} V¬≤/Hz")
print(f"üîπ –î–æ–ª—è –∞–ª—å—Ñ–∞-—Ä–∏—Ç–º–∞: {alpha_ratio*100:.2f}%")

# –ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è –∞–ª—å—Ñ–∞-—Ä–∏—Ç–º–∞
if alpha_ratio > 0.3:
    print("üòå –ê–ª—å—Ñ–∞-—Ä–∏—Ç–º –≤—ã—Ä–∞–∂–µ–Ω ‚Äî –≤–µ—Ä–æ—è—Ç–Ω–æ, —Ä–∞—Å—Å–ª–∞–±–ª–µ–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ, –≤–æ–∑–º–æ–∂–Ω–æ –∑–∞–∫—Ä—ã—Ç—ã–µ –≥–ª–∞–∑–∞.")
else:
    print("üëÄ –ê–ª—å—Ñ–∞-—Ä–∏—Ç–º —Å–ª–∞–±—ã–π ‚Äî –≤–æ–∑–º–æ–∂–Ω–æ, –æ—Ç–∫—Ä—ã—Ç—ã–µ –≥–ª–∞–∑–∞ –∏–ª–∏ –∞–∫—Ç–∏–≤–Ω–æ–µ –≤–Ω–∏–º–∞–Ω–∏–µ.")
